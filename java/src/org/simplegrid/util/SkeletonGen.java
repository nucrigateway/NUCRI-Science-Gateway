package org.simplegrid.util;

import java.io.*;
import java.lang.reflect.*;
import java.lang.annotation.*;
import java.text.DateFormat;
import java.util.Date;

public class SkeletonGen {
	public void printCopyright(PrintWriter fout) {
		fout.println("/**");
		fout.println(" *  Copyright (c) 2007-2010 CyberInfrastructure and Geospatial");
		fout.println(" *  Information Laboratory (CIGI), University of Illinois at");
		fout.println(" *  Urbana-Champaign, All Rights Reserved.");
		fout.println(" */");
		fout.println("");
	}
	public static void main(String[] args) {
	try{
		SkeletonGen gen = new SkeletonGen();
		Class srcClass = Class.forName(args[0]);
		PrintWriter fout = new PrintWriter(args[1]);
		String pkgName = srcClass.getPackage().getName();
		String[] strs = srcClass.getName().split("\\.");
		String className = strs[strs.length - 1];
		// segment: copyright
		gen.printCopyright(fout);
		fout.println("// This file was auto-generated by SimpleGrid SkeletonGen utility");
		fout.println("// Built on : " + DateFormat.getDateInstance().format(new Date()));
		// segment: package
		fout.println("package " + pkgName + ";");
		fout.println("");
		// class header
		fout.println("public class " + className + "Skeleton implements " + className + "SkeletonInterface {");
		Method[] srcMethods = srcClass.getMethods();
		for (int i=0; i<srcMethods.length; i++) {
			if (!srcMethods[i].getDeclaringClass().getName().equals(srcClass.getName()))
				continue;
			String methodName = srcMethods[i].getName();
			String bName = methodName.substring(0, 1).toUpperCase() + (methodName.length() > 1 ? methodName.substring(1, methodName.length()) : "");
			fout.println("\tpublic " + pkgName + "." + bName + "Response " + methodName);
			String inputParmName = methodName + i;
			fout.println("\t(" + pkgName + "." + bName + " " + inputParmName + ")");
			fout.println("\t{");
			// method body
			String instName = className.toLowerCase() + i;
			fout.println("\t\t" + pkgName + "." + className + " " + instName + "= new " + pkgName + "." + className + "();");
			
			String returnType =  srcMethods[i].getReturnType().getName();
			Class[] gpList = srcMethods[i].getParameterTypes();
			String paramListString = "";
			for (int j=0; j<gpList.length; j++) {
				// param type: gpList[j].getName()
				// TODO: find parameter name if class is compiled using "java -g"
				paramListString += inputParmName + ".getArgs" + j + "()";
				if (j < gpList.length - 1)
					paramListString += ", ";
			}
			fout.println("\t\t" + returnType + " r = " + instName + "." + methodName + "(" + paramListString + ");");
			fout.println("\t\t" + pkgName + "." + bName + "Response res = new " + pkgName + "." + bName + "Response();");
			fout.println("\t\tres.set_return(r);");
			fout.println("\t\treturn res;");
			fout.println("\t}\n");
		}
		fout.println("}");
		fout.close();
	} catch (Exception e) {
		System.out.println("Usage: java -classpath [cp to your class] org.simplegrid.util.SkeletonGen [class name] [output filename]");
		e.printStackTrace();
	}
	}
}
